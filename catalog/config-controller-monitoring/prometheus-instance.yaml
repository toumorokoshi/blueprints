apiVersion: v1
kind: ServiceAccount
metadata:
  annotations:
    iam.gke.io/gcp-service-account: gcp-service-account # kpt-set: ${gcp-service-account}
  name: prometheus-config-controller
  namespace: config-controller-monitoring
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  name: prometheus-config-controller
rules:
- apiGroups: [""]
  resources:
  - nodes
  - services
  - endpoints
  - pods
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources:
  - configmaps
  verbs: ["get"]
- nonResourceURLs: ["/metrics"]
  verbs: ["get"]
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: prometheus-config-controller
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: prometheus-config-controller
subjects:
- kind: ServiceAccount
  name: prometheus-config-controller
  namespace: config-controller-monitoring
---
# start a prometheus to scrape and store metrics
# we also inject the prometheus stackdriver sidecar here.
kind: Prometheus
apiVersion: monitoring.coreos.com/v1
metadata:
  name: prometheus-config-controller
  namespace: config-controller-monitoring
  labels:
    prometheus: config-controller
spec:
  serviceAccountName: prometheus-config-controller
  # specify the gmp image
  image: "gke.gcr.io/prometheus-engine/prometheus:v2.28.1-gmp.1-gke.1"
  version: "2.28.1-gmp.1-gke.1"
  # could add 2 replicas for redundancy
  # replicas: 2
  serviceMonitorSelector:
    matchLabels:
      component: config-controller
  enableAdminAPI: false
  resources:
    requests:
      # this may have to be increased depending on the number of metrics stored in the cluster.
      memory: 400Mi
---
# A prometheus service is exposed for debugging purposes
# this can be accessed locally with port forwarding:
# kubectl -n config-controller-monitoring port-forward svc/prometheus-config-controller 9190
apiVersion: v1
kind: Service
metadata:
  name: prometheus-config-controller
  namespace: config-controller-monitoring
spec:
  type: ClusterIP
  ports:
  - name: web
    port: 9090
    protocol: TCP
    targetPort: 9090
  selector:
    app: prometheus
    prometheus: config-controller
---
# Promethus UI
# https://cloud.google.com/stackdriver/docs/managed-prometheus/query#promui-deploy
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend
  namespace: config-controller-monitoring
spec:
  replicas: 2
  selector:
    matchLabels:
      app: frontend
  template:
    metadata:
      labels:
        app: frontend
    spec:
      serviceAccountName: prometheus-config-controller
      containers:
      - name: frontend
        image: "gke.gcr.io/prometheus-engine/frontend:v0.1.1-gke.0"
        args:
        - "--web.listen-address=:9090"
        - "--query.project-id=project-id" # kpt-set: --query.project-id=${project-id}
        ports:
        - name: web
          containerPort: 9090
        readinessProbe:
          httpGet:
            path: /-/ready
            port: web
        livenessProbe:
          httpGet:
            path: /-/healthy
            port: web
---
apiVersion: v1
kind: Service
metadata:
  name: frontend
  namespace: config-controller-monitoring
spec:
  clusterIP: None
  selector:
    app: frontend
  ports:
  - name: web
    port: 9090
